/*************************************************************
**         Europäisches Institut für Systemsicherheit        *
**   Proktikum "Kryptoanalyse"                               *
**                                                           *
** Versuch 4: Kocher-Timing-Attack                           *
**                                                           *
**************************************************************
**
** attack.c: Timing-Attacke Rahmenprogramm
**/
#include <stdio.h>
#include <time.h>

#include "longint.h"
#include "texp.h"

#include "daemon.h"

#define nbits 128 /* die Rechenlaenge */

#define EXPBITS 128 /* Anzahl der Bits im Exponent */

longnum n; /* Modulus */
longnum y_trial; /* Hier soll der geheime Exponent y berechnet werden */
longnum y_ok; /* Tatsaechlicher geheimer Exponent (vom Daemon) */
int ok; /* war der Exponent richtig? */

const unsigned long expected_timing = (1<<18);
/* Erwartungswert fuer den Zeitaufwand einer Multiplikation */


int main (void)
{
  connect_daemon (&n); /* Mit dem Daemonen verbinden und den Modulus
                        * abholen */

  /* XXX Aufgabe: mit exp_daemon () Samples generieren und y_trial berechnen */
  attack(&n);


  printf ("Berechneter Exponent: %s\n", LLong2Hex (&y_trial, 0, 1, 1));
  ok = key_daemon (&y_ok, &y_trial);
  printf ("Das war %s\n", ok?"richtig":"falsch");
  if (! ok) {
    printf ("Richtig war: %s\n", LLong2Hex (&y_ok, 0, 1, 1));
  }
  disc_daemon (); /* Verbindung zum Daemon beenden */
  exit (0);
}

longnum_ptr attack(longnum_ptr n)
{
	longnum x,y,z;
	unsigned long total_timing=exp_daemon(&z,&x);
	longnum eins,temp;
	LInitNumber(&eins, NBITS(n), 0);
	unsigned long timing_base_eins=exp_daemon(&temp,&eins);
	printf("%l\n",total_timing;)
}
